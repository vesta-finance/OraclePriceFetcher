/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "FlagsInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlagsInterface__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IOracleVerificationV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleVerificationV1__factory>;
    getContractFactory(
      name: "IOracleWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleWrapper__factory>;
    getContractFactory(
      name: "IPriceFeedV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceFeedV2__factory>;
    getContractFactory(
      name: "MockOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOracle__factory>;
    getContractFactory(
      name: "OracleVerificationV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleVerificationV1__factory>;
    getContractFactory(
      name: "PriceFeedV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceFeedV2__factory>;
    getContractFactory(
      name: "BaseWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseWrapper__factory>;
    getContractFactory(
      name: "ChainlinkWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkWrapper__factory>;
    getContractFactory(
      name: "CustomOracleWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CustomOracleWrapper__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "FlagsInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlagsInterface>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IOracleVerificationV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleVerificationV1>;
    getContractAt(
      name: "IOracleWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleWrapper>;
    getContractAt(
      name: "IPriceFeedV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceFeedV2>;
    getContractAt(
      name: "MockOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOracle>;
    getContractAt(
      name: "OracleVerificationV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleVerificationV1>;
    getContractAt(
      name: "PriceFeedV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceFeedV2>;
    getContractAt(
      name: "BaseWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseWrapper>;
    getContractAt(
      name: "ChainlinkWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkWrapper>;
    getContractAt(
      name: "CustomOracleWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CustomOracleWrapper>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
